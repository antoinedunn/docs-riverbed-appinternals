---
title: Using AppInternals
owner: Partners
---

This topic describes how to bind your Application to an AppInternals service instance and start collecting data.

<% if false %>
This is a comment that is stripped out by the ruby processor
<!--
JIM - I think these next two sections ('before' and 'cli') are TMI.  Any PCF admin would know these steps.


This example uses the spring-music application. You can download the application and build instructions at [https://github.com/cloudfoundry-samples/spring-music](https://github.com/cloudfoundry-samples/spring-music).  


## <a id='before'></a> Before You Begin

1. Complete the one-time steps described in [Installing and Configuring AppInternals](installing.html)

1. Install the Cloud Foundry Command Line Interface (cf CLI) if it is not already installed in your environment. See [Installing the cf CLI](https://docs.pivotal.io/pivotalcf/2-4/cf-cli/install-go-cli.html).

1. Identify the API endpoint for your Pivotal environment. The API endpoint is the URL for the Pivotal Apps Manager that you specify to log in using the cf CLI. For example, if the URL for the Apps Manager UI is `https://apps.mypivotal.mycompany.com`, the API endpoint might be `https://api.mypivotal.mycompany.com`.


## <a id='cli'></a> cf CLI: Logging In to the Pivotal API Endpoint 

1. Open a command-prompt window.

1. Use the `cf login` command and the Pivotal API endpoint to log in. At the `Email>` prompt, supply the user name for the Apps Manager, and then the password. Specify the `Org` and `Space` for your environment (`riverbed` and `qa` in this example).  For example:

```
 C:\testapps>cf login -a https://api.mypivotal.mycompany.com --skip-ssl-validation
 API endpoint: https://api.mypivotal.mycompany.com
 
 Email> admin
 
 Password>
 Authenticating...
 OK
 
 Select an org (or press enter to skip):
 1. riverbed
 2. system
 
 Org> 1
 Targeted org riverbed
 
 Targeted space qa
 
 API endpoint:   https://api.mypivotal.mycompany.com (API version: 2.98.0)
 User:           admin
 Org:            riverbed
 Space:          qa
```
-->
<% end %>

## <a id='bind'></a> Pivotal Apps Manager: Binding the Application to the AppInternals Service

Use the Pivotal Apps Manager to bind an application to the AppInternals service instance. Creating the service instance is a one-time task described in [Installing and Configuring AppInternals](installing.html#service).

1. Log in to the Pivotal Apps Manager and navigate to your application.

1. Select your application instance and click on the **Services** tab.

1. Click on **BIND SERVICE**.
    <%= image_tag("bindService1.png") %>

1. In the **Service to Bind** list, select the AppInternals service.

1. There are no parameters to add. Leave the **Add Parameters** area empty.

1. Click **CREATE**.
    <%= image_tag("bindService2.png") %>

1. Confirm that the application is now bound to the service:
    <%= image_tag("bindService3.png") %>


## <a id='envvars'></a> Environment Variables per Application 

Before restaging your application, you can add environment variables to it to tailor certain things.

<table class="nice">
    <th>Env Variable</th>
    <th>Description</th>
    <tr>
        <td>`RVBD_APP_CONFIG`</td>
        <td>The AppInternals Config name, as seen in the Analysis Server UI. <br>This overrides the one specified in [configuration of the AppInternals tile](installing.html#config).<br>Make sure the name is spelled correctly to match an existing config on the Analysis Server.<br>If the name has spaces in it, replace them with + signs</td>
    </tr>
    <tr>
        <td>`RVBD_APP_INSTANCE`</td>
        <td>A meaningful instance name to use for the application, to override the default.</td>
    </tr>
</table>

There are a couple of ways to set an environment variable, such as adding it to the application's manifest file, or using the cf command line.

Here's how to do it by hand with the `cf set-env` command:
```
C:\testapps\spring-music-master>cf set-env spring-music-doctest RVBD_APP_CONFIG my-config-name
```

A more reliable way is to add this definition to the `env` block of the application's manifest file:
```
---
applications:
- name: my-app
  env:
    RVBD_APP_CONFIG: my-config-name
```

You must `cf restage` your app after setting env variables.


## <a id='jbp'></a> Java Buildpack

Make sure that you're using at least **JBP version 4.18 or higher**. Earlier versions are not supported.

## <a id='restage'></a> Restaging the Application 
The `cf restage` command recreates the application so that it will be monitored by AppInternals. Specify the application name (`spring-music-doctest` in this example).  

```
C:\testapps\spring-music-master>cf restage spring-music-doctest
Restaging app spring-music-doctest in org riverbed / space qa as admin...

Staging app and tracing logs...
   Creating container
   Successfully created container
   Downloading app package...
   Downloading build artifacts cache...
   Downloaded build artifacts cache (45.9M)
   Downloaded app package (40.6M)
.
.
.
Waiting for app to start...

name:              spring-music-doctest
.
.
.
     state     since                  cpu      memory         disk           details
#0   running   2018-06-08T20:41:03Z   213.2%   389.8M of 1G   209.4M of 1G
```


## <a id='confirm'></a> Enjoy Your Data!

After you restage the application, the AppInternals analysis server will automatically harvest performance data. In a few minutes, transaction data for your instrumented applications will appear in the AppInternals interface.

1. Log in to the analysis server specified during [configuration of the AppInternals tile](installing.html#config).

1. The **Instances** tab will show transactions from the newly-monitored application.
<%= image_tag("appInUI.png") %>

<% if false %>
This is a comment that is stripped out by the ruby processor
<!--**TODO You can also use this section to include information about Architecture and Troubleshooting for known errors. 
If you include a Troubleshooting section, follow the Symptom/Explanation format used in the 
[Okta Troubleshooting](http://docs.pivotal.io/p-identity/okta/troubleshooting.html) topic**.-->
<% end %>