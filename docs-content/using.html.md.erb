---
title: Using AppInternals
owner: Partners
---

This topic describes one approach to push an application to PCF and bind it to an AppInternals service instance. 

As an example, it uses the spring-music application.  You can download the application and build instructions at [https://github.com/cloudfoundry-samples/spring-music] (https://github.com/cloudfoundry-samples/spring-music).  


## <a id='before'></a>Before You Begin

1. Complete the one-time steps described in [Installing and Configuring AppInternals] (installing.html)
1.  Create a [Pivotal Network account] (https://account.run.pivotal.io/z/uaa/sign-up) if you do not have one.
1.  Install the Cloud Foundry Command Line Interface (cf CLI) if it is not already installed in your environment. See [Installing the cf CLI] (https://docs.pivotal.io/pivotalcf/2-1/cf-cli/install-go-cli.html).
1.  Identify the API endpoint for your Pivotal environment.  The API endpoint is the URL for the Pivotal Apps Manager that you specify to log in using the cf CLI.  For example, if the URL for the Apps Manager UI is `https://apps.mypivotal.mycompany.com`, the API endpoint might be `https://api.mypivotal.mycompany.com`.


## <a id='cli'></a>Log in Using the cf CLI and Pivotal API Endpoint 

1. Open a command-prompt window.
1. Use the `cf login` command and the Pivotal API endpoint to log in.  At the `Email>` prompt, supply the user name for the Apps Manager, and then the password.  Specify the `Org` and `Space` for your environment (`riverbed` and `qa` in this example).  For example:

```
 C:\testapps>cf login -a https://api.system1.nhqalab.com --skip-ssl-validation
 API endpoint: https://api.system1.nhqalab.com
 
 Email> admin
 
 Password>
 Authenticating...
 OK
 
 Select an org (or press enter to skip):
 1. riverbed
 2. riverbed-appinternals-org
 3. system
 
 Org> 1
 Targeted org riverbed
 
 Targeted space qa
 
 API endpoint:   https://api.system1.nhqalab.com (API version: 2.98.0)
 User:           admin
 Org:            riverbed
 Space:          qa
 
 C:\testapps>
```

## <a id='push'></a>Push the Application to Pivotal with `cf push`

The `cf push` command pushes a new application or changes to an existing application to the Pivotal Apps Manager.  Issue the `cf push` command from the root directory of your application.  

The following example pushes an application named `spring-music-doctest`.  (The `manifest.yaml` file specifies the application name.) 

```
C:\testapps>cd spring-music-master
C:\testapps\spring-music-master>cf push
Pushing from manifest to org riverbed / space qa as admin...
Using manifest file C:\testapps\spring-music-master\manifest.yml
Getting app info...
Creating app with these attributes...
+ name:        spring-music-doctest
  path:        C:\testapps\spring-music-master\build\libs\spring-music-master-1.0.jar
+ buildpack:   https://github.com/riverbed-appinternals-qa/java-buildpack.git
+ memory:      1G
  routes:
+   spring-music-doctest-anxious-bushbuck.apps1.nhqalab.com
.
.
.
     state     since                  cpu      memory         disk           details
#0   running   2018-06-08T19:16:47Z   160.1%   322.4M of 1G   170.1M of 1G
```

## <a id='bind'></a>Bind the Application to the AppInternals Service in Pivotal Apps Manager

Use the Pivotal Apps Manager to bind the application to the AppInternals service instance.  (Creating the service instance is a one-time task described in [Installing and Configuring AppInternals] (installing.html#service).)

1. Log in to the Pivotal Apps Manager and navigate to your application.
1. Select your application instance and click on the **Services** tab.
    <%= image_tag("SelectApp.png") %>
1. Click on **NEW SERVICE**.
    <%= image_tag("BindServiceAppsManager.png") %>
1. Select the AppInternals Service.
1. Select the **Riverbed License (free)** option (this is the only option and click **SELECT PLAN**. 
1. Provide a value to display for the service instance name.  The **Instance Name** value  must contain the sub-string `appinternals` (for example `appinternals-doctest`) which is the filter in the Java buildpack for binding your applications to AppInternals.  
1. Make sure the application you want is selected in the ***Bind to App** field. 

1. There are no parameters to add.  Click **CREATE**.

    <%= image_tag("BoundServiceAppsManager.png") %>


## <a id='restage'></a>Restage the Application with `cf restage`

The `cf restage` command recreates the application so that it will be monitored by AppInternals.  Specify the application name (`spring-music-doctest` in this example).  

```
C:\testapps\spring-music-master>cf restage spring-music-doctest
Restaging app spring-music-doctest in org riverbed / space qa as admin...

Staging app and tracing logs...
   Creating container
   Successfully created container
   Downloading app package...
   Downloading build artifacts cache...
   Downloaded build artifacts cache (45.9M)
   Downloaded app package (40.6M)
.
.
.
Waiting for app to start...

name:              spring-music-doctest
.
.
.
     state     since                  cpu      memory         disk           details
#0   running   2018-06-08T20:41:03Z   213.2%   389.8M of 1G   209.4M of 1G

```


## <a id='confirm'></a>Enjoy Your Data!

After you restage the application, the AppInternals analysis server will automatically harvest performance data.

**TODO Screenshot(s) of the Analysis Server** 

<!--**TODO You can also use this section to include information about Architecture and Troubleshooting for known errors. 
If you include a Troubleshooting section, follow the Symptom/Explanation format used in the 
[Okta Troubleshooting](http://docs.pivotal.io/p-identity/okta/troubleshooting.html) topic**.-->
